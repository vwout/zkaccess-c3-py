from c3 import crc


def test_crc_basic():
    # Test data generated from https, http://www.lammertbies.nl/comm/info/crc-calculation.html
    assert 0xBB3D == crc.crc16(b'123456789')
    assert 0xBB3D == crc.crc16(["1", "2", "3", "4", "5", "6", "7", "8", "9"])
    assert 0xBB3D == crc.crc16({49, 50, 51, 52, 53, 54, 55, 56, 57})
    assert 0xE9D9 == crc.crc16(b"abcdefg")
    assert 0x0F65 == crc.crc16(b"0123456789ABCDEF")
    assert 0x0F65 == crc.crc16((["0123456789", "ABCDEF"]))


def test_crc_connect():
    # Request
    assert 0x8fd7 == crc.crc16([0x01, 0x76, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00])
    # Response
    assert 0x3320 == crc.crc16((0x01, 0xc8, 0x04, 0x00, 0xd6, 0xcd, 0x00, 0x00))
    # Response
    assert 0x47c8 == crc.crc16([0x01, 0xc8, 0x04, 0x00, 0x54, 0xf1, 0x00, 0x00])


def test_crc_real_log():
    # Request
    assert 0xf687 == crc.crc16([0x01, 0x0b, 0x04, 0x00, 0x3e, 0xe3, 0x02, 0x00])
    # Response
    assert 0xbf72 == crc.crc16(bytes.fromhex("01 0b 04 00 78 e5 02 00"))

    # Request
    assert 0xcd2c == crc.crc16([0x01, 0xc8, 0x14, 0x00, 0x78, 0xe5, 0x02, 0x00, 0x03, 0x00, 0x00, 0x00, 0x11, 0x00,
                                0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x00, 0x33, 0x75, 0x21])
    # Response
    assert 0x4f24 == crc.crc16(b'\x01\xc8\x14\x00\x54\xf1\x02\x00\x03\x00\x00\x00\x11\x00\x00\x00\x00\x01\xff\x00\xda'
                               b'\x3e\x75\x21')


def test_crc_disconnect():
    # Request
    assert 0x0fde == crc.crc16([0x01, 0x02, 0x04, 0x00, 0x3a, 0xcf, 0x02, 0x00])
    # Request
    assert 0x6a75 == crc.crc16([0x01, 0xc8, 0x04, 0x00, 0x3e, 0xe3, 0x03, 0x00])
